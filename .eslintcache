[{"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/ChattyDisplay.tsx":"1","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Hooks/useInterval.js":"2","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Hooks/useViewport.js":"3","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Profile.tsx":"4","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Home.tsx":"5","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/helpers/useMessages.ts":"6","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/helpers/useButtons.tsx":"7","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Login.tsx":"8","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/reportWebVitals.js":"9","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Chatty.tsx":"10","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Backend.ts":"11","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useSpotifyAuth.tsx":"12","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedButton.tsx":"13","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useButtons.tsx":"14","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useInterval.js":"15","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessagesProvider.tsx":"16","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Profile.tsx":"17","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/usePriorContent.tsx":"18","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessageWrapper.tsx":"19","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Navbar.tsx":"20","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Login.tsx":"21","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedMessage.tsx":"22","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/App.tsx":"23","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Home.tsx":"24","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ChattyDisplay.tsx":"25","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useViewport.js":"26","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ButtonWrapper.tsx":"27","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Authorized.tsx":"28","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Register.tsx":"29","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Routes.tsx":"30","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useMessages.ts":"31","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/index.js":"32","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useChattyScript.tsx":"33"},{"size":4376,"mtime":1617311333380,"results":"34","hashOfConfig":"35"},{"size":457,"mtime":1614464632602,"results":"36","hashOfConfig":"35"},{"size":743,"mtime":1617312694780,"results":"37","hashOfConfig":"35"},{"size":826,"mtime":1617312536842,"results":"38","hashOfConfig":"35"},{"size":1324,"mtime":1617312694778,"results":"39","hashOfConfig":"35"},{"size":4859,"mtime":1617312694778,"results":"40","hashOfConfig":"35"},{"size":3035,"mtime":1617318716841,"results":"41","hashOfConfig":"35"},{"size":1911,"mtime":1617321900873,"results":"42","hashOfConfig":"35"},{"size":362,"mtime":1611021517246,"results":"43","hashOfConfig":"44"},{"size":5154,"mtime":1617673653130,"results":"45","hashOfConfig":"44"},{"size":3920,"mtime":1617329954199,"results":"46","hashOfConfig":"44"},{"size":1881,"mtime":1617150782618,"results":"47","hashOfConfig":"44"},{"size":457,"mtime":1617136003700,"results":"48","hashOfConfig":"44"},{"size":3380,"mtime":1617724663277,"results":"49","hashOfConfig":"44"},{"size":457,"mtime":1614464632602,"results":"50","hashOfConfig":"44"},{"size":4154,"mtime":1617665579298,"results":"51","hashOfConfig":"44"},{"size":853,"mtime":1617325939480,"results":"52","hashOfConfig":"44"},{"size":1993,"mtime":1617136003717,"results":"53","hashOfConfig":"44"},{"size":6167,"mtime":1617136003711,"results":"54","hashOfConfig":"44"},{"size":716,"mtime":1617818641360,"results":"55","hashOfConfig":"44"},{"size":1915,"mtime":1617331988689,"results":"56","hashOfConfig":"44"},{"size":434,"mtime":1617136003700,"results":"57","hashOfConfig":"44"},{"size":451,"mtime":1617665633368,"results":"58","hashOfConfig":"44"},{"size":1318,"mtime":1617325931658,"results":"59","hashOfConfig":"44"},{"size":1432,"mtime":1618105290085,"results":"60","hashOfConfig":"44"},{"size":743,"mtime":1617312694780,"results":"61","hashOfConfig":"44"},{"size":706,"mtime":1617665130643,"results":"62","hashOfConfig":"44"},{"size":552,"mtime":1617136003697,"results":"63","hashOfConfig":"44"},{"size":2339,"mtime":1617136003716,"results":"64","hashOfConfig":"44"},{"size":703,"mtime":1617136003720,"results":"65","hashOfConfig":"44"},{"size":4844,"mtime":1617332175450,"results":"66","hashOfConfig":"44"},{"size":595,"mtime":1612052359689,"results":"67","hashOfConfig":"44"},{"size":3411,"mtime":1618105336751,"results":"68","hashOfConfig":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},"1i4blhn",{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"pu27ed",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"99"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"99"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/ChattyDisplay.tsx",["152"],"import React, {useContext, useRef, useEffect} from \"react\";\nimport {MessagesContext} from \"./MessagesProvider\";\nimport MessageWrapper from \"./MessageWrapper\";\nimport ButtonWrapper from \"./ButtonWrapper\";\nimport Register from \"./Register\";\nimport useMessages from \"./helpers/useMessages\";\nimport useButtons from \"./helpers/useButtons\";\nimport {useHistory} from \"react-router-dom\";\nimport Backend from \"../../Backend\";\n// import useWindowDimensions from \"../../Hooks/useWindowDimensions\";\nimport useViewport from \"../../Hooks/useViewport\";\n\n//HOLDS ALL THE MESSAGE WRAPPER AND BUTTON WRAPPER COMPONENTS NEEDED TO BUILD THE \n//CONVERSATION CHATTY WILL HAVE WITH OUR USER\nfunction ChattyDisplay(): JSX.Element {\n  const scrollToBottomRef = useRef<any | null>();\n  const history = useHistory();\n  const {user, chattyMessagesPhase, displayedContent} = useContext(MessagesContext);\n  const {viewportHeight}  = useViewport();\n  const {initialButtons, proceedWithoutSpotifyButtons, tryAgainButtons} = useButtons();\n  const {\n    initialMessages,\n    whatIfNoSpotify,\n    spotifyAccountError,\n    proceedWithoutSpotify,\n    secondFailedAttempt,\n    spotifyAccountValid,\n    registerUserPartOne,\n    registerUserPartTwo,\n    registerUserPartThree,\n    registerUserPartFour,\n    registerUserPartFive,\n    registerUserPartSix,\n  } = useMessages();\n\n  //FINISHED FUNCTION THAT WILL WILL RUN ONCE CHATTY HAS SENT THE FINAL MESSAGE TO REDIRECT TO USER PROFILE\n  const redirectToProfile = (val: boolean) => {\n    if (val === true) history.push(\"/profile\");\n    try {\n      Backend.registerUser(user);\n    } catch(e) {\n      //add flash message functionality if registering user fails\n    }\n  };\n\n///////////////////////////////////////////////  CHATTY SCRIPT  /////////////////////////////////////////////////\n\n  //ALL POSSIBLE MESSAGE AND BUTTON OPTIONS THAT CHATTY CAN DISPLAY TO THE USER\n  //THROUGH THE CHATTYMESSAGEPHASE VARIABLE WE WILL NAVIGATE TO THE NECESSARY ITEM TO DISPLAY\n  const chattyScript = [\n    <MessageWrapper key={initialMessages.id} messages={initialMessages.messages}/>,\n    <ButtonWrapper key={initialButtons.id} buttons={initialButtons.buttons}/>,\n    <MessageWrapper key={whatIfNoSpotify.id} messages={whatIfNoSpotify.messages}/>,\n    <ButtonWrapper key={proceedWithoutSpotifyButtons.id} buttons={proceedWithoutSpotifyButtons.buttons}/>,\n    <MessageWrapper key={spotifyAccountError.id} messages={spotifyAccountError.messages}/>,\n    <ButtonWrapper key={tryAgainButtons.id} buttons={tryAgainButtons.buttons}/>,\n    <MessageWrapper key={proceedWithoutSpotify.id} messages={proceedWithoutSpotify.messages} incrementMessageValue={3}/>,\n    <MessageWrapper key={secondFailedAttempt.id} messages={secondFailedAttempt.messages} incrementMessageValue={2}/>,\n    <MessageWrapper key={spotifyAccountValid.id} messages={spotifyAccountValid.messages}/>,\n    <MessageWrapper key={registerUserPartOne.id} messages={registerUserPartOne.messages}/>,\n    <Register key={\"first name\"} input=\"first name\"/>,\n    <MessageWrapper key={registerUserPartTwo.id} messages={registerUserPartTwo.messages}/>,\n    <Register key={\"last name\"} input=\"last name\"/>,\n    <MessageWrapper key={registerUserPartThree.id} messages={registerUserPartThree.messages}/>,\n    <Register key={\"email\"} input=\"email\"/>,\n    <MessageWrapper key={registerUserPartFour.id} messages={registerUserPartFour.messages}/>,\n    <Register key={\"username\"} input=\"username\"/>,\n    <MessageWrapper key={registerUserPartFive.id} messages={registerUserPartFive.messages}/>,\n    <Register key={\"password\"} input=\"password\"/>,\n    <MessageWrapper key={registerUserPartSix.id} messages={registerUserPartSix.messages} finishedFunction={redirectToProfile}/>,\n  ]\n\n///////////////////////////////////////////////  RETURN JSX  /////////////////////////////////////////////////\n\n  return (\n    <div className=\"Chatty-Container\" >\n      <div className=\"Chatty\" style={{maxHeight: viewportHeight - 200}}>\n        <div className=\"Chatty-Left-Filler\"></div>\n        <div className=\"Chatty-Display\">\n          {displayedContent.map((item, index) => <div key={index}>{item}</div>)}\n          {chattyScript[chattyMessagesPhase]}\n          <div className=\"Chatty-MSG-Bottom-Filler\" ref={scrollToBottomRef}></div>\n        </div>\n        <div className=\"Chatty-Right-Filler\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChattyDisplay;","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Hooks/useInterval.js",["153","154"],"import React, {useRef, useEffect} from \"react\";\n\nconst useInterval = (callback, delay, myRef) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n\n    function tick() {\n      savedCallback.current();\n    };\n\n    if (delay !== null) {\n      myRef.current = setInterval(tick, delay);\n      return () => clearInterval(myRef.current);\n    };\n  }, [delay]);\n};\n\nexport default useInterval;","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Hooks/useViewport.js",[],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Profile.tsx",["155"],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Home.tsx",["156"],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/helpers/useMessages.ts",["157"],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/helpers/useButtons.tsx",[],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Login.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/reportWebVitals.js",[],["158","159"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Chatty.tsx",[],["160","161"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Backend.ts",[],["162","163"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useSpotifyAuth.tsx",["164"],"import React, {useContext} from \"react\";\nimport {MessagesContext} from \"../MessagesProvider\";\nimport Backend from \"../../../Backend\";\n\ninterface updateChattyProperties {\n  priorChatContent: JSX.Element[]\n  incrementVal: number\n}\ninterface AccessTokenRequestProperties {\n  code: string | null\n  priorChatContent: JSX.Element[]\n  errorVal: number\n  successVal: number\n}\n\ninterface TokenObj {\n  access_token: string\n  error: null | string\n  expires_in: number\n  refresh_token: string\n  token_type: string\n}\n\nfunction useSpotifyAuth() {\n  const {updateUser, incrementMessagingPhase, addContentToBeDisplayed} = useContext(MessagesContext);\n\n  function updateChattyToDisplayWhereUserLastLeftOff(updateChattyObj: updateChattyProperties) {\n    addContentToBeDisplayed(updateChattyObj.priorChatContent)\n    incrementMessagingPhase(updateChattyObj.incrementVal)\n  }\n\n  async function getAccessTokens(makeRequestObj: AccessTokenRequestProperties) {\n      const tokenObj: TokenObj = await Backend.requestAccessTokens(makeRequestObj.code)\n      //THERE IS GOING TO BE A REDIRECT TO CHATTY AFTER MAKING A REQUEST SO WE'LL NEED TO DISPLAY THE CHAT CONTENT THE USER HAS ALREADY SEEN, OTHERWISE WE'D HAVE TO START THE CHAT OVER\n      if (tokenObj.error) {\n        //HANDLING ACCESS TOKEN REQUEST ERROR\n        updateChattyToDisplayWhereUserLastLeftOff({priorChatContent: makeRequestObj.priorChatContent, incrementVal: makeRequestObj.errorVal})\n      } else {\n        //HANDLING ACCESS TOKEN REQUEST SUCCESS\n        updateChattyToDisplayWhereUserLastLeftOff({priorChatContent: makeRequestObj.priorChatContent, incrementVal: makeRequestObj.successVal})\n        updateUser(\"access_token\", tokenObj.access_token)\n        updateUser(\"refresh_token\", tokenObj.refresh_token)\n      }\n  }\n\n  return {\n    getAccessTokens,\n    updateChattyToDisplayWhereUserLastLeftOff\n  }\n};\n\nexport default useSpotifyAuth;",["165","166"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedButton.tsx",[],["167","168"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useButtons.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useInterval.js",["169","170"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessagesProvider.tsx",[],["171","172"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Profile.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/usePriorContent.tsx",[],["173","174"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessageWrapper.tsx",["175"],"import React, {useState, useRef, useEffect, useContext} from \"react\";\nimport useInterval from \"../../Hooks/useInterval\";\nimport {MessagesContext} from \"./MessagesProvider\";\nimport DisplayedMessage from \"./DisplayedMessage\";\n\n//DEFINING THE CONTRACT FOR THE VARIABLE TYPES THAT WILL BE PASSED IN VIA PROPS\ninterface Props {\n  messages: Array<string>\n  finishedFunction?: (val: boolean) => void\n  addToDisplayedContent?: boolean\n  incrementMessageValue?: number\n};\n\n//OUR COMPONENT THAT ACCEPTS THE APPROPRIATE MESSAGES NEEDED FOR OUR CHATTY RESPONSE AND\n//APPENDS THEM TO THE DOM ONE LETTER AT A TIME\nfunction MessageWrapper({messages, finishedFunction, addToDisplayedContent = true, incrementMessageValue = 1}: Props): JSX.Element {\n  const [displayedMessages, setDisplayedMessages] = useState<Array<string>>([]);\n  const [createMessage, setCreateMessage] = useState<string>(\"\");\n  const [count, setCount] = useState<number>(0);\n  const [messageCharLength, setMessageCharLength] = useState<number>(0);\n  const [charLength, setCharLength] = useState<number>(0);\n  const [delayValue, setDelayValue] = useState<number>(100);\n  const [isRunning, setIsRunning] = useState<boolean>(true);\n  const [finishedMessages, setFinishedMessages] = useState<boolean>(false);\n  const [onLastMessage, setOnLastMessage] = useState<boolean>(false);\n  const {incrementMessagingPhase, addContentToBeDisplayed} = useContext(MessagesContext);\n  const useIntervalId = useRef<any | null>();\n  const scrollToBottomRef = useRef<any | null>();\n  const timeoutId = useRef<any | null>();\n  const typingCursor: string = \" \\u{258C}\";\n  let typingCursorJSX: JSX.Element;\n\n  //SCROLL DOWN TO END OF MESSAGE TYPING TO KEEP MESSAGES IN VIEWPORT WHILE CHATTY IS TYPING\n  useEffect(() => {\n    const scrollToBottom = () => {\n      scrollToBottomRef.current.scrollIntoView({behavior: \"smooth\"});\n    };\n    if (count < messages.length && !finishedMessages) scrollToBottom();\n  }, [count, finishedMessages, messages]);\n\n  //FUNCTION TO PASS TO OUR USEINTERVAL HOOK TO APPEND A LETTER AT A TIME TO CREATEMESSAGE\n  //IN ORDER TO CREATE THE LOOK AS IF OUR CHAT BOT WAS TYPING\n  const appendMessages = () => {\n    setMessageCharLength(messages[count].length);\n    const msgWithNewLetterAdded: string = messages[count].substring(charLength, charLength + 1);\n    const msgWithRemovedCursor = createMessage.slice(0, -2);\n    setCreateMessage(msgWithRemovedCursor + msgWithNewLetterAdded + typingCursor);\n    setCharLength(length => length + 1);\n    //CHANGING THE DELAY VALUE AFTER EACH LETTER APPENDED TO SCREEN IN ORDER TO TRY\n    //AND CREATE A MORE HUMAN VARIABLE TYPING SPEED\n    setDelayValue(Math.floor(Math.random() * 60) + 1);\n  };\n\n  // CALLING THE USEINTERVAL HOOK TO BE ABLE TO DYNAMICALLY ALTER THE DELAY FOR OUR INTERVAL\n  useInterval(appendMessages, isRunning ? delayValue : null, useIntervalId);\n\n  //SET TIMEOUT TO UPDATE ISRUNNING VARAIBLE TO TRUE AFTER A BRIEF PAUSE TO SPACE OUT CHATTY'S MESSAGES\n  useEffect(() => {\n\n    if (isRunning) return;\n    //IF ALL MESSAGES HAVE BEEN APPENDED TO OUR DOM DON'T NEED TO UPDATE COUNT OR CHANGE ISRUNNING\n    if (count >= messages.length && count !== 0) return;\n\n    timeoutId.current = setTimeout(() => {\n      setIsRunning(true);\n      //MOVED SETCOUNT TO BE INSIDE THIS TIMEOUT AS A WAY TO PREVENT AN INFINITE LOOP\n      //SINCE THIS EXECUTES RIGHT BEFORE COUNT IS SET BACK TO ZERO WHICH NEVER TRIGGERS\n      //THE CLEAR INTERVAL USE EFFECT\n      setCount(num => num + 1);\n    }, 500);\n\n    return () => clearTimeout(timeoutId.current);\n  },[isRunning, count, messages]);\n\n  //USEEFFECT THAT WILL RESET CREATEMESSAGE TO AN EMPTY STRING ONCE THE MESSAGE IS FINISHED\n  //AND THEN APPEND THAT MESSAGE TO DISPLAYEDMESSAGES TO APPEND TO THE DOM \n  useEffect(() => {\n\n    if (charLength >= messageCharLength && messageCharLength !== 0) {\n      const msgWithRemovedCursor = createMessage.slice(0, -2);\n      setDisplayedMessages(state => [...state, msgWithRemovedCursor]);\n      setCreateMessage(\"\");\n      setCharLength(0);\n      setIsRunning(false);\n    };\n  }, [setCount, charLength, setCharLength, messageCharLength, setDisplayedMessages, setCreateMessage, createMessage]);\n\n  //USEEFFECT THAT WILL CLEAR THE USEINTERVAL TIMER WHEN ALL MESSAGES PASSED IN TO OUR \n  //MESSAGE WRAPPER COMPONENT HAVE FINISHED APPENDING TO THE DOM\n  useEffect(() => {\n\n    if (count >= messages.length && count !== 0) {\n      clearInterval(useIntervalId.current);\n      setCount(0);\n      setCharLength(0);  \n      setFinishedMessages(true);\n      if (finishedFunction) finishedFunction(true);\n      if (addToDisplayedContent) {\n        addContentToBeDisplayed([<DisplayedMessage messages={messages}/>])\n        incrementMessagingPhase(incrementMessageValue);\n      }\n    };\n  }, [count, messages, finishedFunction, incrementMessagingPhase]);\n\n  //UPDATING ONLASTMESSAGE TO BE TRUE TO PREVENT TYPING CURSOR TO APPEAR AFTER THE LAST MESSAGE\n  useEffect(() => {\n    const preventTypingCursor = () => {\n      setOnLastMessage(true);\n    };\n\n    if (count === messages.length - 1) preventTypingCursor();\n  }, [count, setOnLastMessage, messages]);\n\n  //NEEDED TO SEPARATE OUT ONLASTMESSAGE FROM THE INLINE CONDITIONAL IN JSX SINCE THERE SCROLLINTOVIEW WOULD\n  //SOMETIMES CAUSE AN ERROR SINCE JSX WOULDNT BE IN VIEW FOR AT TIMES\n  if (onLastMessage) {\n    typingCursorJSX = <div ref={scrollToBottomRef}></div>;\n  } else {\n    typingCursorJSX = (\n      <>\n      {!isRunning && <div className=\"Chatty-Message-Box\" ref={scrollToBottomRef}><p className=\"Chatty-Message\">{typingCursor}</p></div>}\n      {isRunning && <div className=\"Chatty-Message-Box\" ref={scrollToBottomRef}><p className=\"Chatty-Message-Black\">‎‎_</p></div>}\n      </>\n    )\n  };\n\n  // RETURNING JSX\n  return (\n    <div className=\"Chatty-Message-Container\">\n      {displayedMessages && displayedMessages.map((item, index) => <div key={index} className=\"Chatty-Message-Box\"><p className=\"Chatty-Message\">{item}</p></div>)}\n      {createMessage && <div className=\"Chatty-Message-Box\"><p className=\"Chatty-Message\">{createMessage}</p></div>}\n      {typingCursorJSX}\n    </div>\n  );\n};\n\nexport default MessageWrapper;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Navbar.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Login.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedMessage.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/App.tsx",[],["176","177"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Home.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ChattyDisplay.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useViewport.js",[],["178","179"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ButtonWrapper.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Authorized.tsx",[],["180","181"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Register.tsx",[],["182","183"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Routes.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useMessages.ts",["184"],"import React, {useContext} from \"react\";\nimport {MessagesContext} from \"../MessagesProvider\";\n\ninterface IMessageObj {\n  id: string\n  messages: string[]\n}\n\n// type Hook = () => {\n//   initialMessages: IMessageObj,\n//   whatIfNoSpotify: IMessageObj,\n//   proceedWithoutSpotify: IMessageObj,\n//   registerUserPartOne: IMessageObj,\n//   registerUserPartTwo: IMessageObj,\n//   registerUserPartThree: IMessageObj,\n//   registerUserPartFour: IMessageObj,\n//   registerUserPartFive: IMessageObj,\n//   registerUserPartSix: IMessageObj,\n//   spotifyAccountValid: IMessageObj,\n//   secondFailedAttempt: IMessageObj,\n//   spotifyAccountError: IMessageObj\n// };\n\nfunction useMessages() {\n  const {user} = useContext(MessagesContext);\n  let userFirstName = user[\"first_name\"] !== \"\" ? user[\"first_name\"] : \"there\";\n  const userUsername = user[\"username\"] !== \"\" ? user[\"username\"] : \"\";\n\n////////////////////////////////////////////////////  PRE BAKED MESSAGES FOR CHATTY  ////////////////////////////////////////////////////\n\n  const initialMessages: IMessageObj = {\n    id: \"m1\",\n    messages: [\n      \"Hi, I'm Acoustic.io, your digital companion. I'm here to share new music with you.\", \n      \"If you're already a registered user you can login by clicking the link above.\",\n      \"If you're new I'll walk you through setting up your Spotify Account.\",\n      \"This will allow me to scan it for trends in your listening history to better assist me in suggesting the most relevant music for you.\"\n    ]\n  };\n\n  //CREATING SHORTER MESSAGES FOR QUICKER TESTING\n  // const initialMessages: IMessageObj = {\n  //   id: \"m1\",\n  //   messages: [\"hi\"]\n  // };\n\n  const whatIfNoSpotify: IMessageObj = {\n    id: \"m2\",\n    messages: [\n      \"Being able to access your Spotify will help me create playlists that have a higher chance of being ones that you will enjoy.\",\n      \"Also, you'll be able to save playlists directly to your Spotify account without leaving our site.\",\n      \"But don't worry if you don't have a Spotify account.\",\n      \"I can still set up a profile for you and share playlists.\",\n      \"And I promise I won't share your information with anyone or alter your Spotify data other than saving playlists to your account.\"\n    ]\n  };\n\n  const spotifyAccountError: IMessageObj = {\n    id: \"m3\",\n    messages: [\n      \"Oh no there was an error setting up your Spotify account!\",\n      \"Are you sure you entered the right info?\",\n      \"Or maybe you clicked cancel.\",\n      \"Do you want to try again or proceed without connecting your Spotify?\"\n    ]\n  };\n\n  const proceedWithoutSpotify: IMessageObj = {\n    id: \"m4\",\n    messages: [\n      \"Sounds good, we won't connect a Spotify account\",\n      \"We can always add it later in your profile settings.\"\n    ]\n  };\n\n  const secondFailedAttempt: IMessageObj = {\n    id: \"m5\",\n    messages: [\n      \"Dangit, it didn't work this time either.\",\n      \"I'm just going to proceed without using Spotify.\",\n      \"We can always add it later in your profile settings.\"\n    ]\n  };\n\n  const spotifyAccountValid: IMessageObj = {\n    id: \"m6\",\n    messages: [\"Perfect, you're Spotify account is all set up!\"]\n  };\n\n  //CREATING SHORTER MESSAGES FOR QUICKER TESTING\n  // const registerUserPartOne: IMessageObj = {\n  //   id: \"m7\",\n  //   messages: [\n  //     \"Let's start with your first name.\"\n  //   ]\n  // };\n\n  const registerUserPartOne: IMessageObj = {\n    id: \"m7\",\n    messages: [\n      \"Ok, now we'll set up a profile for you.\", \n      \"This will give us a place to continually add you new music as it comes out.\",\n      \"Let's start with your first name. You can use the input field below to enter it.\"\n    ]\n  };\n\n  const registerUserPartTwo: IMessageObj = {\n    id: \"m8\",\n    messages: [\n      `Hi ${userFirstName}!`,\n      \"And what's your last name?\"\n    ]\n  };\n\n  const registerUserPartThree: IMessageObj = {\n    id: \"m9\",\n    messages: [\n      \"Excellent. And what's your email address in case you get locked out.\",\n      \"We promise we won't spam you with emails.\"\n    ]\n  };\n\n  const registerUserPartFour: IMessageObj = {\n    id: \"m10\",\n    messages: [\"What would you like your username to be?\"]\n  };\n\n  const registerUserPartFive: IMessageObj = {\n    id: \"m11\",\n    messages: [\n      `Ok ${userUsername} it is!`,\n      \"And lastly, what would you like your password to be?\"\n    ]\n  };\n\n  const registerUserPartSix: IMessageObj = {\n    id: \"m12\",\n    messages: [\n      \"Perfect, you're all set up!\",\n      \"I'm taking you to your profile now.\"\n    ]\n  };\n\n  return {\n    initialMessages,\n    whatIfNoSpotify,\n    proceedWithoutSpotify,\n    registerUserPartOne,\n    registerUserPartTwo,\n    registerUserPartThree,\n    registerUserPartFour,\n    registerUserPartFive,\n    registerUserPartSix,\n    spotifyAccountError,\n    spotifyAccountValid,\n    secondFailedAttempt\n  };\n};\n\nexport default useMessages;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/index.js",[],["185","186"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useChattyScript.tsx",[],{"ruleId":"187","severity":1,"message":"188","line":1,"column":36,"nodeType":"189","messageId":"190","endLine":1,"endColumn":45},{"ruleId":"191","severity":1,"message":"192","line":1,"column":8,"nodeType":"189","messageId":"190","endLine":1,"endColumn":13},{"ruleId":"193","severity":1,"message":"194","line":20,"column":6,"nodeType":"195","endLine":20,"endColumn":13,"suggestions":"196"},{"ruleId":"187","severity":1,"message":"197","line":4,"column":11,"nodeType":"189","messageId":"190","endLine":4,"endColumn":16},{"ruleId":"187","severity":1,"message":"198","line":2,"column":9,"nodeType":"189","messageId":"190","endLine":2,"endColumn":13},{"ruleId":"187","severity":1,"message":"192","line":1,"column":8,"nodeType":"189","messageId":"190","endLine":1,"endColumn":13},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"199","replacedBy":"203"},{"ruleId":"201","replacedBy":"204"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"187","severity":1,"message":"192","line":1,"column":8,"nodeType":"189","messageId":"190","endLine":1,"endColumn":13},{"ruleId":"199","replacedBy":"205"},{"ruleId":"201","replacedBy":"206"},{"ruleId":"199","replacedBy":"207"},{"ruleId":"201","replacedBy":"208"},{"ruleId":"191","severity":1,"message":"192","line":1,"column":8,"nodeType":"189","messageId":"190","endLine":1,"endColumn":13},{"ruleId":"193","severity":1,"message":"194","line":20,"column":6,"nodeType":"195","endLine":20,"endColumn":13,"suggestions":"209"},{"ruleId":"199","replacedBy":"210"},{"ruleId":"201","replacedBy":"211"},{"ruleId":"199","replacedBy":"212"},{"ruleId":"201","replacedBy":"213"},{"ruleId":"193","severity":1,"message":"214","line":103,"column":6,"nodeType":"195","endLine":103,"endColumn":66,"suggestions":"215"},{"ruleId":"199","replacedBy":"216"},{"ruleId":"201","replacedBy":"217"},{"ruleId":"199","replacedBy":"218"},{"ruleId":"201","replacedBy":"219"},{"ruleId":"199","replacedBy":"220"},{"ruleId":"201","replacedBy":"221"},{"ruleId":"199","replacedBy":"222"},{"ruleId":"201","replacedBy":"223"},{"ruleId":"187","severity":1,"message":"192","line":1,"column":8,"nodeType":"189","messageId":"190","endLine":1,"endColumn":13},{"ruleId":"199","replacedBy":"205"},{"ruleId":"201","replacedBy":"206"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-unused-vars","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'myRef'. Either include it or remove the dependency array.","ArrayExpression",["224"],"'IUser' is defined but never used.","'Link' is defined but never used.","no-native-reassign",["225"],"no-negated-in-lhs",["226"],["225"],["226"],["225"],["226"],["225"],["226"],["227"],["225"],["226"],["225"],["226"],"React Hook useEffect has missing dependencies: 'addContentToBeDisplayed', 'addToDisplayedContent', and 'incrementMessageValue'. Either include them or remove the dependency array.",["228"],["225"],["226"],["225"],["226"],["225"],["226"],["225"],["226"],{"desc":"229","fix":"230"},"no-global-assign","no-unsafe-negation",{"desc":"229","fix":"231"},{"desc":"232","fix":"233"},"Update the dependencies array to be: [delay, myRef]",{"range":"234","text":"235"},{"range":"236","text":"235"},"Update the dependencies array to be: [count, messages, finishedFunction, incrementMessagingPhase, addToDisplayedContent, addContentToBeDisplayed, incrementMessageValue]",{"range":"237","text":"238"},[416,423],"[delay, myRef]",[416,423],[4771,4831],"[count, messages, finishedFunction, incrementMessagingPhase, addToDisplayedContent, addContentToBeDisplayed, incrementMessageValue]"]