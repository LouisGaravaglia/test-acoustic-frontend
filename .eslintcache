[{"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Home.tsx":"1","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Navbar.tsx":"2","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/index.js":"3","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Authorized.tsx":"4","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ChattyDisplay.tsx":"5","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useViewport.js":"6","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsCarousel.tsx":"7","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsTitleScroll.tsx":"8","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useMessages.ts":"9","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsTrack.tsx":"10","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Buttons/ButtonsPast.tsx":"11","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesWrapper.tsx":"12","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesCurrent.tsx":"13","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Register.tsx":"14","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsContainer.tsx":"15","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsThumbnail.tsx":"16","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsCarouselContainer.tsx":"17","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsTitleScrollContainer.tsx":"18","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Routes.tsx":"19","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useChattyScript.tsx":"20","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/usePriorContent.tsx":"21","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useButtons.tsx":"22","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Buttons/ButtonsContainer.tsx":"23","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesTypingCursor.tsx":"24","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useInterval.js":"25","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useMousePosition.js":"26","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesContainer.tsx":"27","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/reportWebVitals.js":"28","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesPast.tsx":"29","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Buttons/ButtonsCurrent.tsx":"30","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Login.tsx":"31","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Chatty.tsx":"32","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useElementOnScreen.tsx":"33","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Backend.ts":"34","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessagesProvider.tsx":"35","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useSpotifyAuth.tsx":"36"},{"size":1736,"mtime":1620529052322,"results":"37","hashOfConfig":"38"},{"size":1725,"mtime":1620617499243,"results":"39","hashOfConfig":"38"},{"size":595,"mtime":1618535218568,"results":"40","hashOfConfig":"38"},{"size":558,"mtime":1618165493000,"results":"41","hashOfConfig":"38"},{"size":1432,"mtime":1618165493000,"results":"42","hashOfConfig":"38"},{"size":743,"mtime":1618165493000,"results":"43","hashOfConfig":"38"},{"size":3204,"mtime":1620946415561,"results":"44","hashOfConfig":"38"},{"size":1384,"mtime":1620763859120,"results":"45","hashOfConfig":"38"},{"size":5140,"mtime":1620529094024,"results":"46","hashOfConfig":"38"},{"size":2627,"mtime":1620877797640,"results":"47","hashOfConfig":"38"},{"size":420,"mtime":1620580770297,"results":"48","hashOfConfig":"38"},{"size":213,"mtime":1618419198462,"results":"49","hashOfConfig":"38"},{"size":402,"mtime":1618419198214,"results":"50","hashOfConfig":"38"},{"size":2296,"mtime":1620519776730,"results":"51","hashOfConfig":"38"},{"size":2391,"mtime":1620765604195,"results":"52","hashOfConfig":"38"},{"size":563,"mtime":1620518490284,"results":"53","hashOfConfig":"38"},{"size":1832,"mtime":1620945641001,"results":"54","hashOfConfig":"38"},{"size":1684,"mtime":1620946501894,"results":"55","hashOfConfig":"38"},{"size":782,"mtime":1620580935989,"results":"56","hashOfConfig":"38"},{"size":3493,"mtime":1619316026969,"results":"57","hashOfConfig":"38"},{"size":1898,"mtime":1619360433269,"results":"58","hashOfConfig":"38"},{"size":2967,"mtime":1620580822965,"results":"59","hashOfConfig":"38"},{"size":635,"mtime":1618419119707,"results":"60","hashOfConfig":"38"},{"size":858,"mtime":1618419198396,"results":"61","hashOfConfig":"38"},{"size":457,"mtime":1618165493000,"results":"62","hashOfConfig":"38"},{"size":482,"mtime":1618956179931,"results":"63","hashOfConfig":"38"},{"size":5725,"mtime":1618419433743,"results":"64","hashOfConfig":"38"},{"size":362,"mtime":1611021517000,"results":"65","hashOfConfig":"38"},{"size":696,"mtime":1618419318459,"results":"66","hashOfConfig":"38"},{"size":415,"mtime":1619358924101,"results":"67","hashOfConfig":"38"},{"size":2174,"mtime":1620528860682,"results":"68","hashOfConfig":"38"},{"size":2262,"mtime":1618174512000,"results":"69","hashOfConfig":"38"},{"size":1118,"mtime":1620580997949,"results":"70","hashOfConfig":"38"},{"size":1215,"mtime":1620581178117,"results":"71","hashOfConfig":"38"},{"size":4154,"mtime":1618419241208,"results":"72","hashOfConfig":"38"},{"size":5992,"mtime":1618184577000,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"pu27ed",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"81"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"76"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"76"},"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Home.tsx",[],["164","165"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Navbar.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/index.js",[],["166","167"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Authorized.tsx",["168","169"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ChattyDisplay.tsx",[],["170","171"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useViewport.js",[],["172","173"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsCarousel.tsx",["174","175"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsTitleScroll.tsx",["176","177","178"],"import React, {useRef, useEffect} from 'react';\nimport useElementOnScreen from '../Hooks/useElementOnScreen';\n\ninterface Props {\n  playlist: {\n    \"id\": string\n    \"name\": string\n  }\n  index: number\n  selectedPlaylistIndex: number\n  handleScrollToSelectedTitle: (titleRef: any | null) => void\n  titleRef: any | null\n}\n\nfunction PlaylistsTitleScroll({playlist, index, selectedPlaylistIndex, handleScrollToSelectedTitle}: Props): JSX.Element {\n  const titleRef = useRef<any | null>(null);\n  let leftSideOfTitleDiv: number = 0;\n  let rightSideOfTitleDiv: number = 0;\n  if (titleRef.current !== null) {\n    const {left, right} = titleRef.current.getBoundingClientRect();\n    leftSideOfTitleDiv = left;\n    rightSideOfTitleDiv = right;\n  }\n  const entry = useElementOnScreen(titleRef, {\n    root: document.querySelector('.scrolling-wrapper'),\n    rootMargin: \"0px -300px\",\n    threshold: 0.40\n  });\n  const isVisible = !!entry?.isIntersecting;\n\n    useEffect(() => {\n      if(selectedPlaylistIndex === index) handleScrollToSelectedTitle(titleRef);\n    }, [titleRef, selectedPlaylistIndex])\n\n  return (\n    <div className={isVisible ? 'Playlists-Selected-Title' : 'Playlists-Unselected-Title'} ref={titleRef} >\n      <h2 className={isVisible ? 'Playlists-Selected-Title-Text' : 'Playlists-Unselected-Title-Text'}>{playlist.name}</h2>\n    </div>\n  );\n};\n\nexport default PlaylistsTitleScroll;",["179","180"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useMessages.ts",["181"],"import React, {useContext} from 'react';\nimport {MessagesContext} from '../MessagesProvider';\n\ninterface IMessageObj {\n  id: string\n  messages: string[]\n}\n\n// type Hook = () => {\n//   initialMessages: IMessageObj,\n//   whatIfNoSpotify: IMessageObj,\n//   proceedWithoutSpotify: IMessageObj,\n//   registerUserPartOne: IMessageObj,\n//   registerUserPartTwo: IMessageObj,\n//   registerUserPartThree: IMessageObj,\n//   registerUserPartFour: IMessageObj,\n//   registerUserPartFive: IMessageObj,\n//   registerUserPartSix: IMessageObj,\n//   spotifyAccountValid: IMessageObj,\n//   secondFailedAttempt: IMessageObj,\n//   spotifyAccountError: IMessageObj\n// };\n\nfunction useMessages() {\n  const {user} = useContext(MessagesContext);\n  let userFirstName = user['first_name'] !== '' ? user['first_name'] : 'there';\n  const userUsername = user['username'] !== '' ? user['username'] : '';\n\n////////////////////////////////////////////////////  PRE BAKED MESSAGES FOR CHATTY  ////////////////////////////////////////////////////\n\n  const initialMessages: IMessageObj = {\n    id: 'm1',\n    messages: [\n      `Hi, I'm Acoustigram.io, your digital companion. I'm here to share new music with you.`, \n      `If you're already a registered user you can login by clicking the link above.`,\n      `If you're new I'll walk you through setting up your Spotify Account.`,\n      `This will allow me to scan it for trends in your listening history to better assist me in suggesting the most relevant music for you.`\n    ]\n  };\n\n  // CREATING SHORTER MESSAGES FOR QUICKER TESTING\n  // const initialMessages: IMessageObj = {\n  //   id: 'm1',\n  //   messages: ['hi']\n  // };\n\n  const whatIfNoSpotify: IMessageObj = {\n    id: 'm2',\n    messages: [\n      'Being able to access your Spotify will help me create playlists that have a higher chance of being ones that you will enjoy.',\n      `Also, you'll be able to save playlists directly to your Spotify account without leaving our site.`,\n      `But don't worry if you don't have a Spotify account.`,\n      'I can still set up a profile for you and share playlists.',\n      `And I promise I won't share your information with anyone or alter your Spotify data other than saving playlists to your account.`\n    ]\n  };\n\n    //CREATING SHORTER MESSAGES FOR QUICKER TESTING\n    // const whatIfNoSpotify: IMessageObj = {\n    //   id: 'm1',\n    //   messages: ['hi']\n    // };\n\n  const spotifyAccountError: IMessageObj = {\n    id: 'm3',\n    messages: [\n      'Oh no there was an error setting up your Spotify account!',\n      'Are you sure you entered the right info?',\n      'Or maybe you clicked cancel.',\n      'Do you want to try again or proceed without connecting your Spotify?'\n    ]\n  };\n\n  const proceedWithoutSpotify: IMessageObj = {\n    id: 'm4',\n    messages: [\n      `Sounds good, we won't connect a Spotify account.`,\n      'We can always add it later in your profile settings.'\n    ]\n  };\n\n  const secondFailedAttempt: IMessageObj = {\n    id: 'm5',\n    messages: [\n      `Dangit, it didn't work this time either.`,\n      `I'm just going to proceed without using Spotify.`,\n      'We can always add it later in your profile settings.'\n    ]\n  };\n\n  const spotifyAccountValid: IMessageObj = {\n    id: 'm6',\n    messages: [`Perfect, your Spotify account is all set up!`]\n  };\n\n  const registerUserPartOne: IMessageObj = {\n    id: 'm7',\n    messages: [\n      `Ok, now we'll set up a profile for you.`, \n      'This will give us a place to continually add you new music as it comes out.',\n      `Let's start with your first name. You can use the input field below to enter it.`\n    ]\n  };\n\n  //CREATING SHORTER MESSAGES FOR QUICKER TESTING\n  // const registerUserPartOne: IMessageObj = {\n  //   id: 'm1',\n  //   messages: ['hi']\n  // };\n\n  const registerUserPartTwo: IMessageObj = {\n    id: 'm8',\n    messages: [\n      `Hi ${userFirstName}!`,\n      `And what's your last name?`\n    ]\n  };\n\n  const registerUserPartThree: IMessageObj = {\n    id: 'm9',\n    messages: [\n      `Excellent. And what's your email address in case you get locked out.`,\n      `We promise we won't spam you with emails.`\n    ]\n  };\n\n  const registerUserPartFour: IMessageObj = {\n    id: 'm10',\n    messages: ['What would you like your username to be?']\n  };\n\n  const registerUserPartFive: IMessageObj = {\n    id: 'm11',\n    messages: [\n      `Ok ${userUsername} it is!`,\n      'And lastly, what would you like your password to be?'\n    ]\n  };\n\n  const registerUserPartSix: IMessageObj = {\n    id: 'm12',\n    messages: [\n      `Perfect, you're all set up!`,\n      `I'm taking you to your playlists now.`,\n      `Just keep in mind, this site is still in development so currently these playlists are just placeholders.`,\n      `You can not listen to the tracks quite yet. More to come soon!`\n    ]\n  };\n\n  return {\n    initialMessages,\n    whatIfNoSpotify,\n    proceedWithoutSpotify,\n    registerUserPartOne,\n    registerUserPartTwo,\n    registerUserPartThree,\n    registerUserPartFour,\n    registerUserPartFive,\n    registerUserPartSix,\n    spotifyAccountError,\n    spotifyAccountValid,\n    secondFailedAttempt\n  };\n};\n\nexport default useMessages;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsTrack.tsx",["182"],"import React, {useState, useEffect} from 'react';\nimport {IoPlayCircleOutline, IoPauseCircleOutline, IoPlaySkipForward, IoPlaySkipBack} from 'react-icons/io5';\n\ninterface Props {\n  track: any\n  index: number\n  selectedTrack: number\n  setSelectedTrack: (index: number) => void\n  selectedPlaylistIndex: number\n  playlistLength: number\n  largeScreenMode: boolean\n}\n\nfunction PlaylistsTrack({largeScreenMode, track, index, selectedTrack, setSelectedTrack, selectedPlaylistIndex, playlistLength}: Props): JSX.Element {\n  const [playingTrack, setPlayingTrack] = useState(true);\n\n  useEffect(() => {\n    function resetTrackVariables() {\n      setPlayingTrack(true);\n      setSelectedTrack(0);\n    }\n\n    resetTrackVariables();\n  }, [track, setPlayingTrack, selectedPlaylistIndex])\n\n\n  function togglePlayingTrack() {\n    setPlayingTrack(state => !state)\n  }\n\n  let styles: React.CSSProperties;\n\n  if (selectedTrack === index && largeScreenMode) {\n    styles = { \n      padding: '40px',\n      width: 'calc(100% - 122px)',\n      cursor: 'default',\n      border: '1px solid #181718',\n    };\n  } else if (selectedTrack === index && !largeScreenMode) {\n    styles = { \n      padding: '40px',\n      width: 'calc(100% - 80px)',\n      cursor: 'default',\n      border: '1px solid #181718',\n    };\n  } else {\n    styles = {};\n  }\n\n  let playTrackControls: JSX.Element;\n\n  playTrackControls = (\n    <>\n      <div className=\"Playlists-ControlBtns-Container\">\n        <div className=\"Playlists-PlayBtn-Box\" onClick={() => setSelectedTrack(selectedTrack === 0 ? selectedTrack : selectedTrack - 1)}>\n          <IoPlaySkipBack className='Playlists-PrevBtn-Icon'/>\n        </div>\n        <div className=\"Playlists-PlayBtn-Box\" onClick={togglePlayingTrack}>\n          {playingTrack ? <IoPauseCircleOutline className='Playlists-PlayBtn-Icon'/> : <IoPlayCircleOutline className='Playlists-PlayBtn-Icon'/>}\n        </div>\n        <div className=\"Playlists-PlayBtn-Box\">\n          <IoPlaySkipForward className='Playlists-NextBtn-Icon' onClick={() => setSelectedTrack(selectedTrack === playlistLength - 1 ? selectedTrack : selectedTrack + 1)}/>\n        </div>\n      </div>\n    </>\n  )\n\n  return (\n    <>\n      <div key={track.track.id} className='Playlists-Track-Container' style={styles} >\n        <div className=\"Playlists-Track-Box\" onClick={() => setSelectedTrack(index)}>\n          <p className='Playlists-Track-Name'>{track.track.name}</p>\n          <p className='Playlists-Artist-Name'>{track.track.artists[0].name}</p>\n        </div>\n        {selectedTrack === index && playTrackControls}\n      </div>\n    </>\n  );\n};\n\nexport default PlaylistsTrack;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Buttons/ButtonsPast.tsx",[],["183","184"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesWrapper.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesCurrent.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Register.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsContainer.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsThumbnail.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsCarouselContainer.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/PlaylistsTitleScrollContainer.tsx",["185","186"],"import React, {useRef, createRef} from 'react';\nimport PlaylistsTitleScroll from './PlaylistsTitleScroll';\nlet playlists =  require('../fakeData/playlist.json');\n\ninterface Props {\n  selectedPlaylistIndex: number\n  selectedPlaylistTitle: string\n  largeScreenMode: boolean\n}\nfunction PlaylistsTitleScrollContainer({largeScreenMode, selectedPlaylistIndex, selectedPlaylistTitle}: Props): JSX.Element {\n  const wrapperRef = useRef<any | null>(null);\n  const titleRefArray = playlists.map((playlist:any) => createRef());\n\n  function handleScrollToSelectedTitle(titleRef: any | null) {\n    if (titleRef.current !== null) {\n      //TODO: MAKE MEDIA QUERY THAT LOWER'S THE AMOUNT SUBTRACTING FROM TITLEREF OFFSET VALUE\n      wrapperRef.current.scroll({left: titleRef.current.offsetLeft - 400, behavior: 'smooth'});\n    }\n  }\n\n  let titleDisplayJSX;\n\n  //ONLY CREATE A SLIDING TITLE UX/UI FOR LARGE SCREENS\n  if (largeScreenMode) {\n    titleDisplayJSX = (\n      <div className=\"scrolling-wrapper\" ref={wrapperRef}>\n        <div className='Playlists-Unselected-Title' ><h2 ></h2></div>\n          {playlists.map((playlist: any, index: any) => <PlaylistsTitleScroll key={index} index={index} titleRef={titleRefArray[index]} playlist={playlist} selectedPlaylistIndex={selectedPlaylistIndex} handleScrollToSelectedTitle={handleScrollToSelectedTitle}/>)}\n        <div className='Playlists-Unselected-Title' ><h2 ></h2></div>\n    </div>\n    )\n  } else {\n    titleDisplayJSX = (\n      <div>\n        <p className=\"Playlists-Small-Screen-Title\">{selectedPlaylistTitle}</p>\n      </div>\n    )\n  }\n\n\n  return (\n    <>\n      {titleDisplayJSX}\n    </>\n  );\n};\n\nexport default PlaylistsTitleScrollContainer;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Routes.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useChattyScript.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/usePriorContent.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useButtons.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Buttons/ButtonsContainer.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesTypingCursor.tsx",[],["187","188"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useInterval.js",["189","190"],"import React, {useRef, useEffect} from 'react';\n\nconst useInterval = (callback, delay, myRef) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n\n    function tick() {\n      savedCallback.current();\n    };\n\n    if (delay !== null) {\n      myRef.current = setInterval(tick, delay);\n      return () => clearInterval(myRef.current);\n    };\n  }, [delay]);\n};\n\nexport default useInterval;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useMousePosition.js",[],["191","192"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesContainer.tsx",["193"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/reportWebVitals.js",[],["194","195"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Messages/MessagesPast.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Buttons/ButtonsCurrent.tsx",["196","197"],"import React, {useEffect, useRef} from 'react';\n\ninterface Props {\n  buttons: Array<JSX.Element>\n  scrollToBottomRef: any | null\n};\n\nfunction ButtonsCurrent({buttons, scrollToBottomRef}: Props): JSX.Element {\n\n  return (\n    <div ref={scrollToBottomRef}>\n      {buttons && buttons.map((item, index) => <div key={index} className='Chatty-Button-Main'>{item}</div>)}\n    </div>\n  );\n};\n\nexport default ButtonsCurrent;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Login.tsx",["198"],"import React, {useState} from 'react';\n// import Backend from '../Backend';\nimport {IoIosArrowRoundForward} from 'react-icons/io';\n\n\nconst Login: React.FC = () => {\n  const INITIAL_VALUE = {\n      username: '',\n      password: '',\n  };\n  const [formData, setFormData] = useState(INITIAL_VALUE);\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const {name, value} = e.target as HTMLTextAreaElement;\n    setFormData(data => ({\n      ...data,\n      [name]:value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const data = formData;\n    try {\n      // const response = await Backend.loginUser(data);\n      // console.log('the response', response);\n    } catch (e) {\n      console.log('hit error', e);\n    };\n  };\n\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <div className='Login-Container'>\n      <div className=\"Login-Content\">\n        <div className='Login-Message-Box'>\n          <p className='Login-Message'>Welcome back! Please login here to access your playlists.</p>\n        </div>\n        <form className='Login-Form' onSubmit={handleSubmit}>\n          <div className='Login-Box'>\n            <input \n              type='text'\n              id='LoginVal'\n              name='username'\n              value={formData.username}\n              onChange={handleChange}\n              className='Login-Form-Input'\n              placeholder='username'\n            />\n          </div>\n          <div className='Login-Box'>\n            <input \n              type='password'\n              id='LoginVal'\n              name='password'\n              value={formData.password}\n              onChange={handleChange}\n              className='Login-Form-Input'\n              placeholder='password'\n            />\n          </div>\n            <button className=\"Login-Button-Box\">\n              <h1 className=\"Login-Button\">Login</h1>\n              <IoIosArrowRoundForward color='#181718' className='Login-Arrow'/>\n            </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n\n","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Chatty.tsx",["199"],"import React, {useEffect, useContext, useState} from 'react';\nimport ChattyDisplay from './ChattyDisplay';\nimport {MessagesContext} from './MessagesProvider';\nimport useSpotifyAuth from './helpers/useSpotifyAuth';\nimport UseAnimations from 'react-useanimations';\nimport loading from 'react-useanimations/lib/loading';\n\nfunction Chatty(): JSX.Element {\n  const {displayedContent} = useContext(MessagesContext);\n  const {isConfirmedCrossSiteAttack, handleSpotifyAuthenticationError, retrieveSpotifyAccessTokens} = useSpotifyAuth();\n  const [firstLoad, setFirstLoad] = useState(false);\n  const [authLogic, setAuthLogic] = useState(false);\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  const stateKey: string | null = params.get('state');\n  const authorizationError: string | null = params.get('error');\n\n////////////////////////////////////////////////////  RUN DISPLAYPREVIOUSMESSAGEHISTORY ON COMPONENT MOUNT CONDITIONALY  ////////////////////////////////////////////////////\n\n  useEffect(() => {\n    //HANDLE AUTHENTICATION AND DISPLAY APPROPRIATE PREVIOUS CHATTY MESSAGES\n    function displayPreviousMessageHistory() {\n      if (isConfirmedCrossSiteAttack()) return;\n  \n      if (authorizationError) {\n        handleSpotifyAuthenticationError()\n      } else {\n        retrieveSpotifyAccessTokens();\n      }\n    }\n    //IF STATEKEY IS TRUTHY THAN THE USER HAS ATTEMPTED TO AUTHENTICATE WITH SPOTIFY \n    //AND WE NEED TO DISPLAY WHERE HE/SHE LEFT OFF IN THE CHATTY CONVERSATION\n    if (stateKey) {\n      setAuthLogic(true);\n      displayPreviousMessageHistory()\n    //IF STATEKEY IS NULL THEN THE USER HASN'T ATTEMPTED TO AUTHENTICATE WITH SPOTIFY\n    //INITIATE CHATTY CONVERSATION AT THE BEGINNING\n    } else {\n      setFirstLoad(true);\n    }\n  }, [stateKey])\n\n////////////////////////////////////////////////////  RENDER LOADING SPINNER OR CHATTY DISPLAY  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      {(authLogic && !displayedContent.length) && <UseAnimations className='Chatty-Loading-Spinner' animation={loading} size={200} style={{ padding: 100 }} strokeColor='#37f8ff' />}\n      {(firstLoad || displayedContent.length) && <ChattyDisplay/>}\n    </>\n  );\n};\n\nexport default Chatty;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useElementOnScreen.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Backend.ts",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessagesProvider.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useSpotifyAuth.tsx",["200"],"import React, {useContext} from 'react';\nimport {MessagesContext} from '../MessagesProvider';\nimport Backend from '../../../Backend';\nimport usePriorContent from './usePriorContent';\n\ninterface updateChattyProperties {\n  priorChatContent: JSX.Element[]\n  incrementVal: number\n}\ninterface AccessTokenRequestProperties {\n  code: string | null\n  priorChatContent: JSX.Element[]\n  errorVal: number\n  successVal: number\n}\n\ninterface TokenObj {\n  access_token: string\n  error: null | string\n  expires_in: number\n  refresh_token: string\n  token_type: string\n}\n\nfunction useSpotifyAuth() {\n  const {updateUser, incrementMessagingPhase, addContentToBeDisplayed, updateStakeKey} = useContext(MessagesContext);\n  const {priorToFirstButton, priorToSecondButtton, priorToFirstButtonSecondAttempt, priorToSecondButtonSecondAttempt} = usePriorContent();\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  const code: string | null  = params.get('code');\n  const stateKey: string | null = params.get('state');\n\n////////////////////////////////////////////////////  CHECKING FOR CROSS SITE ATTACKS BY CONFIRMING STATEKEY IS VALID ////////////////////////////////////////////////////\n\n  function isConfirmedCrossSiteAttack() {\n    const validStateKeys = ['spotify_auth_first_button', 'spotify_auth_second_button', 'spotify_auth_first_button_second_attempt', 'spotify_auth_second_button_second_attempt']\n    if (validStateKeys.indexOf(stateKey === null ? 'noStateKey' : stateKey) === -1) {\n      //i'll probably want to add some kind of message saying ther was an error and then try again\n      return true;\n    }\n    return false;\n  }\n\n////////////////////////////////////////////////////  HANDLING AUTHENTICATION ERROR  ////////////////////////////////////////////////////\n\n  function handleSpotifyAuthenticationError() {\n    if (stateKey === 'spotify_auth_first_button') {\n      //AUTHENTICATION ERROR FROM FIRST LOG INTO SPOTIFY BUTTON CLICKED\n      updateStakeKey('first_button')\n      updateChattyToDisplayWhereUserLastLeftOff({priorChatContent: priorToFirstButton, incrementVal: 4})\n    } else if (stateKey === 'spotify_auth_second_button') {\n      //AUTHENTICATION ERROR FROM SECOND LOG INTO SPOTIFY BUTTON CLICKED\n      updateStakeKey('second_button')\n      updateChattyToDisplayWhereUserLastLeftOff({priorChatContent: priorToSecondButtton, incrementVal: 4})\n    } else if (stateKey === 'spotify_auth_first_button_second_attempt') {\n      //AUTHENTICATION ERROR FROM SECOND ATTEPMT FROM FIRST LOG INTO SPOTIFY BUTTON CLICKED\n      updateChattyToDisplayWhereUserLastLeftOff({priorChatContent: priorToFirstButtonSecondAttempt, incrementVal: 7})\n    } else if (stateKey === 'spotify_auth_second_button_second_attempt') {\n      //AUTHENTICATION ERROR FROM SECOND ATTEMPT FROM SECOND LOG INTO SPOTIFY BUTTON CLICKED\n      updateChattyToDisplayWhereUserLastLeftOff({priorChatContent: priorToSecondButtonSecondAttempt, incrementVal: 7})\n    }\n  }\n\n////////////////////////////////////////////////////  AUTH SUCCESSFUL RETRIEVING ACCESS TOKENS  ////////////////////////////////////////////////////\n\n  function retrieveSpotifyAccessTokens() {\n    if (stateKey === 'spotify_auth_first_button') {\n      //AUTH SUCCESSFULL AFTER FIRST SPOTIFY BUTTON CLICKED\n      getAccessTokens({code, priorChatContent: priorToFirstButton, errorVal: 4, successVal: 8});\n    } else if (stateKey === 'spotify_auth_second_button') {\n      //AUTH SUCCESSFULL AFTER SECOND SPOTIFY BUTTON CLICKED\n      getAccessTokens({code, priorChatContent: priorToSecondButtton, errorVal: 4, successVal: 8});\n    } else if (stateKey === 'spotify_auth_first_button_second_attempt') {\n      //AUTH SUCCESSFULL AFTER FIRST SPOTIFY BUTTON CLICKED BUT SECOND ATTEMPT WAS MADE\n      getAccessTokens({code, priorChatContent: priorToFirstButtonSecondAttempt, errorVal: 7, successVal: 8});\n    } else if (stateKey === 'spotify_auth_second_button_second_attempt') {\n      //AUTH SUCCESSFULL AFTER SECOND SPOTIFY BUTTON CLICKED BUT SECOND ATTEMPT WAS MADE\n      getAccessTokens({code, priorChatContent: priorToSecondButtonSecondAttempt, errorVal: 7, successVal: 8});\n    }\n  }\n\n////////////////////////////////////////////////////  RENDER THE CORRECT PREVIOUS MESSAGES THE USER HAS ALREADY SEEN  ////////////////////////////////////////////////////\n\n  function updateChattyToDisplayWhereUserLastLeftOff(updateChattyObj: updateChattyProperties) {\n    addContentToBeDisplayed(updateChattyObj.priorChatContent)\n    incrementMessagingPhase(updateChattyObj.incrementVal)\n  }\n\n////////////////////////////////////////////////////  GET ACCESS TOKENS FROM SPOTIFY TO BE ABLE TO GET USER SPOTIFY DATA  ////////////////////////////////////////////////////\n\n  async function getAccessTokens(makeRequestObj: AccessTokenRequestProperties) {\n      const tokenObj: TokenObj = await Backend.requestAccessTokens(makeRequestObj.code)\n      //THERE IS GOING TO BE A REDIRECT TO CHATTY AFTER MAKING A REQUEST SO WE'LL NEED TO DISPLAY THE CHAT CONTENT THE USER HAS ALREADY SEEN,\n      //OTHERWISE WE'D HAVE TO START THE CHAT OVER\n      if (tokenObj.error) {\n        //HANDLING ACCESS TOKEN REQUEST ERROR\n        updateChattyToDisplayWhereUserLastLeftOff({priorChatContent: makeRequestObj.priorChatContent, incrementVal: makeRequestObj.errorVal})\n      } else {\n        //HANDLING ACCESS TOKEN REQUEST SUCCESS\n        updateChattyToDisplayWhereUserLastLeftOff({priorChatContent: makeRequestObj.priorChatContent, incrementVal: makeRequestObj.successVal})\n        updateUser('access_token', tokenObj.access_token)\n        updateUser('refresh_token', tokenObj.refresh_token)\n      }\n  }\n\n////////////////////////////////////////////////////  RETURN FUNCTIONS TO BE CALLED  ////////////////////////////////////////////////////\n\n  return {\n    getAccessTokens,\n    updateChattyToDisplayWhereUserLastLeftOff,\n    isConfirmedCrossSiteAttack,\n    handleSpotifyAuthenticationError,\n    retrieveSpotifyAccessTokens\n  }\n};\n\nexport default useSpotifyAuth;",{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":6,"column":9,"nodeType":"207","messageId":"208","endLine":6,"endColumn":13},{"ruleId":"205","severity":1,"message":"209","line":7,"column":9,"nodeType":"207","messageId":"208","endLine":7,"endColumn":14},{"ruleId":"201","replacedBy":"210"},{"ruleId":"203","replacedBy":"211"},{"ruleId":"201","replacedBy":"212"},{"ruleId":"203","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":67,"column":6,"nodeType":"216","endLine":67,"endColumn":17,"suggestions":"217"},{"ruleId":"205","severity":1,"message":"218","line":69,"column":12,"nodeType":"207","messageId":"208","endLine":69,"endColumn":31},{"ruleId":"205","severity":1,"message":"219","line":21,"column":5,"nodeType":"207","messageId":"208","endLine":21,"endColumn":23},{"ruleId":"205","severity":1,"message":"220","line":22,"column":5,"nodeType":"207","messageId":"208","endLine":22,"endColumn":24},{"ruleId":"214","severity":1,"message":"221","line":33,"column":8,"nodeType":"216","endLine":33,"endColumn":41,"suggestions":"222"},{"ruleId":"201","replacedBy":"223"},{"ruleId":"203","replacedBy":"224"},{"ruleId":"205","severity":1,"message":"225","line":1,"column":8,"nodeType":"207","messageId":"208","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"226","line":24,"column":6,"nodeType":"216","endLine":24,"endColumn":53,"suggestions":"227"},{"ruleId":"201","replacedBy":"228"},{"ruleId":"203","replacedBy":"229"},{"ruleId":"230","severity":1,"message":"231","line":27,"column":54,"nodeType":"232","endLine":27,"endColumn":59},{"ruleId":"230","severity":1,"message":"231","line":29,"column":54,"nodeType":"232","endLine":29,"endColumn":59},{"ruleId":"201","replacedBy":"233"},{"ruleId":"203","replacedBy":"234"},{"ruleId":"235","severity":1,"message":"225","line":1,"column":8,"nodeType":"207","messageId":"208","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"236","line":20,"column":6,"nodeType":"216","endLine":20,"endColumn":13,"suggestions":"237"},{"ruleId":"201","replacedBy":"238"},{"ruleId":"203","replacedBy":"239"},{"ruleId":"214","severity":1,"message":"240","line":105,"column":6,"nodeType":"216","endLine":105,"endColumn":66,"suggestions":"241"},{"ruleId":"201","replacedBy":"210"},{"ruleId":"203","replacedBy":"211"},{"ruleId":"205","severity":1,"message":"242","line":1,"column":16,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"205","severity":1,"message":"243","line":1,"column":27,"nodeType":"207","messageId":"208","endLine":1,"endColumn":33},{"ruleId":"205","severity":1,"message":"244","line":23,"column":11,"nodeType":"207","messageId":"208","endLine":23,"endColumn":15},{"ruleId":"214","severity":1,"message":"245","line":41,"column":6,"nodeType":"216","endLine":41,"endColumn":16,"suggestions":"246"},{"ruleId":"205","severity":1,"message":"225","line":1,"column":8,"nodeType":"207","messageId":"208","endLine":1,"endColumn":13},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],"@typescript-eslint/no-unused-vars","'code' is assigned a value but never used.","Identifier","unusedVar","'state' is assigned a value but never used.",["247"],["248"],["247"],["248"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'index' and 'updateSelectedPlaylistIndex'. Either include them or remove the dependency array. If 'updateSelectedPlaylistIndex' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["249"],"'updateSelectedTrack' is defined but never used.","'leftSideOfTitleDiv' is assigned a value but never used.","'rightSideOfTitleDiv' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleScrollToSelectedTitle' and 'index'. Either include them or remove the dependency array. If 'handleScrollToSelectedTitle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["250"],["247"],["248"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'setSelectedTrack'. Either include it or remove the dependency array. If 'setSelectedTrack' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["251"],["247"],["248"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",["247"],["248"],"no-unused-vars","React Hook useEffect has a missing dependency: 'myRef'. Either include it or remove the dependency array.",["252"],["247"],["248"],"React Hook useEffect has missing dependencies: 'addContentToBeDisplayed', 'addToDisplayedContent', and 'incrementMessageValue'. Either include them or remove the dependency array.",["253"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'authorizationError', 'handleSpotifyAuthenticationError', 'isConfirmedCrossSiteAttack', and 'retrieveSpotifyAccessTokens'. Either include them or remove the dependency array.",["254"],"no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},"Update the dependencies array to be: [index, isVisible, updateSelectedPlaylistIndex]",{"range":"267","text":"268"},"Update the dependencies array to be: [titleRef, selectedPlaylistIndex, index, handleScrollToSelectedTitle]",{"range":"269","text":"270"},"Update the dependencies array to be: [track, setPlayingTrack, selectedPlaylistIndex, setSelectedTrack]",{"range":"271","text":"272"},"Update the dependencies array to be: [delay, myRef]",{"range":"273","text":"274"},"Update the dependencies array to be: [count, messages, finishedFunction, incrementMessagingPhase, addToDisplayedContent, addContentToBeDisplayed, incrementMessageValue]",{"range":"275","text":"276"},"Update the dependencies array to be: [authorizationError, handleSpotifyAuthenticationError, isConfirmedCrossSiteAttack, retrieveSpotifyAccessTokens, stateKey]",{"range":"277","text":"278"},[2225,2236],"[index, isVisible, updateSelectedPlaylistIndex]",[1050,1083],"[titleRef, selectedPlaylistIndex, index, handleScrollToSelectedTitle]",[725,772],"[track, setPlayingTrack, selectedPlaylistIndex, setSelectedTrack]",[416,423],"[delay, myRef]",[4865,4925],"[count, messages, finishedFunction, incrementMessagingPhase, addToDisplayedContent, addContentToBeDisplayed, incrementMessageValue]",[1793,1803],"[authorizationError, handleSpotifyAuthenticationError, isConfirmedCrossSiteAttack, retrieveSpotifyAccessTokens, stateKey]"]