[{"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/ChattyDisplay.tsx":"1","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Hooks/useInterval.js":"2","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Hooks/useViewport.js":"3","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Profile.tsx":"4","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Home.tsx":"5","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/helpers/useMessages.ts":"6","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/helpers/useButtons.tsx":"7","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Login.tsx":"8","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/reportWebVitals.js":"9","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Chatty.tsx":"10","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Backend.ts":"11","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedButton.tsx":"12","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useButtons.tsx":"13","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useInterval.js":"14","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessagesProvider.tsx":"15","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Profile.tsx":"16","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/usePriorContent.tsx":"17","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessageWrapper.tsx":"18","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Navbar.tsx":"19","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Login.tsx":"20","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedMessage.tsx":"21","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/App.tsx":"22","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Home.tsx":"23","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ChattyDisplay.tsx":"24","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useViewport.js":"25","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ButtonWrapper.tsx":"26","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Authorized.tsx":"27","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Register.tsx":"28","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Routes.tsx":"29","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useMessages.ts":"30","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/index.js":"31","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useChattyScript.tsx":"32","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedMessagesTest.tsx":"33","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useSpotifyAuth.tsx":"34"},{"size":4376,"mtime":1617311333380,"results":"35","hashOfConfig":"36"},{"size":457,"mtime":1614464632602,"results":"37","hashOfConfig":"36"},{"size":743,"mtime":1617312694780,"results":"38","hashOfConfig":"36"},{"size":826,"mtime":1617312536842,"results":"39","hashOfConfig":"36"},{"size":1324,"mtime":1617312694778,"results":"40","hashOfConfig":"36"},{"size":4859,"mtime":1617312694778,"results":"41","hashOfConfig":"36"},{"size":3035,"mtime":1617318716841,"results":"42","hashOfConfig":"36"},{"size":1911,"mtime":1617321900873,"results":"43","hashOfConfig":"36"},{"size":362,"mtime":1611021517246,"results":"44","hashOfConfig":"45"},{"size":2518,"mtime":1618165180948,"results":"46","hashOfConfig":"45"},{"size":2984,"mtime":1618106138592,"results":"47","hashOfConfig":"45"},{"size":457,"mtime":1618106263807,"results":"48","hashOfConfig":"45"},{"size":3380,"mtime":1618106364563,"results":"49","hashOfConfig":"45"},{"size":457,"mtime":1618114057834,"results":"50","hashOfConfig":"45"},{"size":4154,"mtime":1618106280494,"results":"51","hashOfConfig":"45"},{"size":853,"mtime":1618106217242,"results":"52","hashOfConfig":"45"},{"size":1993,"mtime":1618106662046,"results":"53","hashOfConfig":"45"},{"size":7364,"mtime":1618160246159,"results":"54","hashOfConfig":"45"},{"size":716,"mtime":1618106208445,"results":"55","hashOfConfig":"45"},{"size":1915,"mtime":1618106189247,"results":"56","hashOfConfig":"45"},{"size":434,"mtime":1618116439624,"results":"57","hashOfConfig":"45"},{"size":451,"mtime":1618105936127,"results":"58","hashOfConfig":"45"},{"size":1318,"mtime":1618106178550,"results":"59","hashOfConfig":"45"},{"size":1432,"mtime":1618106257246,"results":"60","hashOfConfig":"45"},{"size":743,"mtime":1618106691464,"results":"61","hashOfConfig":"45"},{"size":706,"mtime":1618106234460,"results":"62","hashOfConfig":"45"},{"size":558,"mtime":1618106168853,"results":"63","hashOfConfig":"45"},{"size":2339,"mtime":1618106328516,"results":"64","hashOfConfig":"45"},{"size":703,"mtime":1618106225978,"results":"65","hashOfConfig":"45"},{"size":4844,"mtime":1618106624430,"results":"66","hashOfConfig":"45"},{"size":595,"mtime":1612052359689,"results":"67","hashOfConfig":"45"},{"size":3411,"mtime":1618106392379,"results":"68","hashOfConfig":"45"},{"size":454,"mtime":1618119425942,"results":"69","hashOfConfig":"45"},{"size":5588,"mtime":1618165153764,"results":"70","hashOfConfig":"45"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"1i4blhn",{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"pu27ed",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"108"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"108"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/ChattyDisplay.tsx",["151"],"import React, {useContext, useRef, useEffect} from \"react\";\nimport {MessagesContext} from \"./MessagesProvider\";\nimport MessageWrapper from \"./MessageWrapper\";\nimport ButtonWrapper from \"./ButtonWrapper\";\nimport Register from \"./Register\";\nimport useMessages from \"./helpers/useMessages\";\nimport useButtons from \"./helpers/useButtons\";\nimport {useHistory} from \"react-router-dom\";\nimport Backend from \"../../Backend\";\n// import useWindowDimensions from \"../../Hooks/useWindowDimensions\";\nimport useViewport from \"../../Hooks/useViewport\";\n\n//HOLDS ALL THE MESSAGE WRAPPER AND BUTTON WRAPPER COMPONENTS NEEDED TO BUILD THE \n//CONVERSATION CHATTY WILL HAVE WITH OUR USER\nfunction ChattyDisplay(): JSX.Element {\n  const scrollToBottomRef = useRef<any | null>();\n  const history = useHistory();\n  const {user, chattyMessagesPhase, displayedContent} = useContext(MessagesContext);\n  const {viewportHeight}  = useViewport();\n  const {initialButtons, proceedWithoutSpotifyButtons, tryAgainButtons} = useButtons();\n  const {\n    initialMessages,\n    whatIfNoSpotify,\n    spotifyAccountError,\n    proceedWithoutSpotify,\n    secondFailedAttempt,\n    spotifyAccountValid,\n    registerUserPartOne,\n    registerUserPartTwo,\n    registerUserPartThree,\n    registerUserPartFour,\n    registerUserPartFive,\n    registerUserPartSix,\n  } = useMessages();\n\n  //FINISHED FUNCTION THAT WILL WILL RUN ONCE CHATTY HAS SENT THE FINAL MESSAGE TO REDIRECT TO USER PROFILE\n  const redirectToProfile = (val: boolean) => {\n    if (val === true) history.push(\"/profile\");\n    try {\n      Backend.registerUser(user);\n    } catch(e) {\n      //add flash message functionality if registering user fails\n    }\n  };\n\n///////////////////////////////////////////////  CHATTY SCRIPT  /////////////////////////////////////////////////\n\n  //ALL POSSIBLE MESSAGE AND BUTTON OPTIONS THAT CHATTY CAN DISPLAY TO THE USER\n  //THROUGH THE CHATTYMESSAGEPHASE VARIABLE WE WILL NAVIGATE TO THE NECESSARY ITEM TO DISPLAY\n  const chattyScript = [\n    <MessageWrapper key={initialMessages.id} messages={initialMessages.messages}/>,\n    <ButtonWrapper key={initialButtons.id} buttons={initialButtons.buttons}/>,\n    <MessageWrapper key={whatIfNoSpotify.id} messages={whatIfNoSpotify.messages}/>,\n    <ButtonWrapper key={proceedWithoutSpotifyButtons.id} buttons={proceedWithoutSpotifyButtons.buttons}/>,\n    <MessageWrapper key={spotifyAccountError.id} messages={spotifyAccountError.messages}/>,\n    <ButtonWrapper key={tryAgainButtons.id} buttons={tryAgainButtons.buttons}/>,\n    <MessageWrapper key={proceedWithoutSpotify.id} messages={proceedWithoutSpotify.messages} incrementMessageValue={3}/>,\n    <MessageWrapper key={secondFailedAttempt.id} messages={secondFailedAttempt.messages} incrementMessageValue={2}/>,\n    <MessageWrapper key={spotifyAccountValid.id} messages={spotifyAccountValid.messages}/>,\n    <MessageWrapper key={registerUserPartOne.id} messages={registerUserPartOne.messages}/>,\n    <Register key={\"first name\"} input=\"first name\"/>,\n    <MessageWrapper key={registerUserPartTwo.id} messages={registerUserPartTwo.messages}/>,\n    <Register key={\"last name\"} input=\"last name\"/>,\n    <MessageWrapper key={registerUserPartThree.id} messages={registerUserPartThree.messages}/>,\n    <Register key={\"email\"} input=\"email\"/>,\n    <MessageWrapper key={registerUserPartFour.id} messages={registerUserPartFour.messages}/>,\n    <Register key={\"username\"} input=\"username\"/>,\n    <MessageWrapper key={registerUserPartFive.id} messages={registerUserPartFive.messages}/>,\n    <Register key={\"password\"} input=\"password\"/>,\n    <MessageWrapper key={registerUserPartSix.id} messages={registerUserPartSix.messages} finishedFunction={redirectToProfile}/>,\n  ]\n\n///////////////////////////////////////////////  RETURN JSX  /////////////////////////////////////////////////\n\n  return (\n    <div className=\"Chatty-Container\" >\n      <div className=\"Chatty\" style={{maxHeight: viewportHeight - 200}}>\n        <div className=\"Chatty-Left-Filler\"></div>\n        <div className=\"Chatty-Display\">\n          {displayedContent.map((item, index) => <div key={index}>{item}</div>)}\n          {chattyScript[chattyMessagesPhase]}\n          <div className=\"Chatty-MSG-Bottom-Filler\" ref={scrollToBottomRef}></div>\n        </div>\n        <div className=\"Chatty-Right-Filler\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChattyDisplay;","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Hooks/useInterval.js",["152","153"],"import React, {useRef, useEffect} from \"react\";\n\nconst useInterval = (callback, delay, myRef) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n\n    function tick() {\n      savedCallback.current();\n    };\n\n    if (delay !== null) {\n      myRef.current = setInterval(tick, delay);\n      return () => clearInterval(myRef.current);\n    };\n  }, [delay]);\n};\n\nexport default useInterval;","/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Hooks/useViewport.js",[],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Profile.tsx",["154"],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Home.tsx",["155"],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/helpers/useMessages.ts",["156"],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/ChatBot/helpers/useButtons.tsx",[],"/Users/louieg3/Documents/Web_development/acoustic-companion/frontend/src/Components/Login.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/reportWebVitals.js",[],["157","158"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Chatty.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Backend.ts",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedButton.tsx",[],["159","160"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useButtons.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useInterval.js",["161","162"],"import React, {useRef, useEffect} from 'react';\n\nconst useInterval = (callback, delay, myRef) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n\n    function tick() {\n      savedCallback.current();\n    };\n\n    if (delay !== null) {\n      myRef.current = setInterval(tick, delay);\n      return () => clearInterval(myRef.current);\n    };\n  }, [delay]);\n};\n\nexport default useInterval;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessagesProvider.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Profile.tsx",[],["163","164"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/usePriorContent.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/MessageWrapper.tsx",["165","166"],"import React, {useState, useRef, useEffect, useContext, useMemo} from 'react';\nimport useInterval from '../../Hooks/useInterval';\nimport {MessagesContext} from './MessagesProvider';\nimport DisplayedMessage from './DisplayedMessage';\n\nimport DisplayedMessagesTest from './DisplayedMessagesTest';\n\n//DEFINING THE CONTRACT FOR THE VARIABLE TYPES THAT WILL BE PASSED IN VIA PROPS\ninterface Props {\n  messages: Array<string>\n  finishedFunction?: (val: boolean) => void\n  addToDisplayedContent?: boolean\n  incrementMessageValue?: number\n};\n\n//OUR COMPONENT THAT ACCEPTS THE APPROPRIATE MESSAGES NEEDED FOR OUR CHATTY RESPONSE AND\n//APPENDS THEM TO THE DOM ONE LETTER AT A TIME\nfunction MessageWrapper({messages, finishedFunction, addToDisplayedContent = true, incrementMessageValue = 1}: Props): JSX.Element {\n  const [displayedMessages, setDisplayedMessages] = useState<Array<string>>([]);\n  const [createMessage, setCreateMessage] = useState<string>('');\n  const [count, setCount] = useState<number>(0);\n  const [messageCharLength, setMessageCharLength] = useState<number>(0);\n  const [charLength, setCharLength] = useState<number>(0);\n  const [delayValue, setDelayValue] = useState<number>(100);\n  const [isRunning, setIsRunning] = useState<boolean>(true);\n  const [finishedMessages, setFinishedMessages] = useState<boolean>(false);\n  const [onLastMessage, setOnLastMessage] = useState<boolean>(false);\n  const {incrementMessagingPhase, addContentToBeDisplayed} = useContext(MessagesContext);\n  const useIntervalId = useRef<any | null>();\n  const scrollToBottomRef = useRef<any | null>();\n  const timeoutId = useRef<any | null>();\n  const typingCursor: string = ' \\u{258C}';\n  let typingCursorJSX: JSX.Element;\n\n  //SCROLL DOWN TO END OF MESSAGE TYPING TO KEEP MESSAGES IN VIEWPORT WHILE CHATTY IS TYPING\n  useEffect(() => {\n    function scrollingToBottom() {\n      scrollToBottomRef.current.scrollIntoView({behavior: 'smooth'});\n    };\n    if (count < messages.length && !finishedMessages) scrollingToBottom();\n  }, [count, finishedMessages, messages]);\n\n  //FUNCTION TO PASS TO OUR USEINTERVAL HOOK TO APPEND A LETTER AT A TIME TO CREATEMESSAGE\n  //IN ORDER TO CREATE THE LOOK AS IF OUR CHAT BOT WAS TYPING\n  function appendMessages() {\n    setMessageCharLength(messages[count].length);\n    const msgWithNewLetterAdded: string = messages[count].substring(charLength, charLength + 1);\n    const msgWithRemovedCursor = createMessage.slice(0, -2);\n    setCreateMessage(msgWithRemovedCursor + msgWithNewLetterAdded + typingCursor);\n    setCharLength(length => length + 1);\n    //CHANGING THE DELAY VALUE AFTER EACH LETTER APPENDED TO SCREEN IN ORDER TO TRY\n    //AND CREATE A MORE HUMAN VARIABLE TYPING SPEED\n    setDelayValue(Math.floor(Math.random() * 60) + 1);\n  };\n\n  // CALLING THE USEINTERVAL HOOK TO BE ABLE TO DYNAMICALLY ALTER THE DELAY FOR OUR INTERVAL\n  useInterval(appendMessages, isRunning ? delayValue : null, useIntervalId);\n\n  //SET TIMEOUT TO UPDATE ISRUNNING VARAIBLE TO TRUE AFTER A BRIEF PAUSE TO SPACE OUT CHATTY'S MESSAGES\n  useEffect(() => {\n\n    if (isRunning) return;\n    //IF ALL MESSAGES HAVE BEEN APPENDED TO OUR DOM DON'T NEED TO UPDATE COUNT OR CHANGE ISRUNNING\n    if (count >= messages.length && count !== 0) return;\n\n    timeoutId.current = setTimeout(() => {\n      setIsRunning(true);\n      //MOVED SETCOUNT TO BE INSIDE THIS TIMEOUT AS A WAY TO PREVENT AN INFINITE LOOP\n      //SINCE THIS EXECUTES RIGHT BEFORE COUNT IS SET BACK TO ZERO WHICH NEVER TRIGGERS\n      //THE CLEAR INTERVAL USE EFFECT\n      setCount(num => num + 1);\n    }, 500);\n\n    return () => clearTimeout(timeoutId.current);\n  },[isRunning, count, messages]);\n\n  //USEEFFECT THAT WILL RESET CREATEMESSAGE TO AN EMPTY STRING ONCE THE MESSAGE IS FINISHED\n  //AND THEN APPEND THAT MESSAGE TO DISPLAYEDMESSAGES TO APPEND TO THE DOM \n  useEffect(() => {\n\n    if (charLength >= messageCharLength && messageCharLength !== 0) {\n      const msgWithRemovedCursor = createMessage.slice(0, -2);\n      setDisplayedMessages(state => [...state, msgWithRemovedCursor]);\n      setCreateMessage('');\n      setCharLength(0);\n      setIsRunning(false);\n    };\n  }, [setCount, charLength, setCharLength, messageCharLength, setDisplayedMessages, setCreateMessage, createMessage]);\n\n  //USEEFFECT THAT WILL CLEAR THE USEINTERVAL TIMER WHEN ALL MESSAGES PASSED IN TO OUR \n  //MESSAGE WRAPPER COMPONENT HAVE FINISHED APPENDING TO THE DOM\n  useEffect(() => {\n\n    if (count >= messages.length && count !== 0) {\n      clearInterval(useIntervalId.current);\n      setCount(0);\n      setCharLength(0);\n      setFinishedMessages(true);\n      if (finishedFunction) finishedFunction(true);\n      if (addToDisplayedContent) {\n        addContentToBeDisplayed([<DisplayedMessage messages={messages}/>])\n        incrementMessagingPhase(incrementMessageValue);\n      }\n    };\n  }, [count, messages, finishedFunction, incrementMessagingPhase]);\n\n  //UPDATING ONLASTMESSAGE TO BE TRUE TO PREVENT TYPING CURSOR TO APPEAR AFTER THE LAST MESSAGE\n  useEffect(() => {\n\n    const preventTypingCursor = () => {\n      setOnLastMessage(true);\n    };\n\n    if (count === messages.length - 1) preventTypingCursor();\n  }, [count, setOnLastMessage, messages]);\n\n  //NEEDED TO SEPARATE OUT ONLASTMESSAGE FROM THE INLINE CONDITIONAL IN JSX SINCE THERE SCROLLINTOVIEW WOULD\n  //SOMETIMES CAUSE AN ERROR SINCE JSX WOULDNT BE IN VIEW FOR AT TIMES\n  if (onLastMessage) {\n    typingCursorJSX = <div ref={scrollToBottomRef}></div>;\n  } else {\n    typingCursorJSX = (\n      <>\n      {!isRunning && <div className='Chatty-Message-Box' ref={scrollToBottomRef}><p className='Chatty-Message'>{typingCursor}</p></div>}\n      {isRunning && <div className='Chatty-Message-Box' ref={scrollToBottomRef}><p className='Chatty-Message-Black'>‎‎_</p></div>}\n      </>\n    )\n  };\n\n  function DisplayedMessagesTest(messages: string[]) {\n    console.log(\"running DisplayedMessage\");\n    return (\n      <>\n        {messages.map((item, index) => <div key={index} className='Chatty-Message-Box'><p className='Chatty-Message'>{item}</p></div>)}\n      </>\n    );\n  };\n\n  const memoizedDisplayedMessages = useMemo(() => DisplayedMessagesTest(displayedMessages), [displayedMessages])\n\n\n  // function CreateMessageTest(messages: string) {\n  //   console.log(\"createMessageTest\");\n    \n  \n  //   return (\n  //     <>\n  //       <div className='Chatty-Message-Box'><p className='Chatty-Message'>{messages}</p></div>\n  //     </>\n  //   );\n  // };\n\n  // const memoizedCreateMessage = useMemo(() => CreateMessageTest(createMessage), [createMessage])\n\n  \n\n  // RETURNING JSX\n  return (\n    <div className='Chatty-Message-Container'>\n      {/* {displayedMessages && displayedMessages.map((item, index) => <div key={index} className='Chatty-Message-Box'><p className='Chatty-Message'>{item}</p></div>)} */}\n      {/* {displayedMessages && <DisplayedMessagesTest messages={displayedMessages}/>} */}\n      {displayedMessages && memoizedDisplayedMessages}\n      {/* {displayedMessages && DisplayedMessagesTest(displayedMessages)} */}\n      {createMessage && <div className='Chatty-Message-Box'><p className='Chatty-Message'>{createMessage}</p></div>}\n      {/* {createMessage && <CreateMessageTest messages={createMessage} />} */}\n      {/* {createMessage && memoizedCreateMessage} */}\n      {typingCursorJSX}\n    </div>\n  );\n};\n\nexport default MessageWrapper;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Navbar.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Login.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedMessage.tsx",[],["167","168"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/App.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Home.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ChattyDisplay.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Hooks/useViewport.js",[],["169","170"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/ButtonWrapper.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Authorized.tsx",["171","172"],"import React from 'react';\n\nconst Login: React.FC = () => {\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let code = params.get('code');\n    let state = params.get('state');\n    // console.log('code: ', code);\n    // console.log('state: ', state);\n\n\n////////////////////////////////////////////////////  RETURN  ////////////////////////////////////////////////////\n\n  return (\n    <>\n      <div className='Login-Box'>\n          <label>I'm authorized!:</label>\n        </div>\n    </>\n  );\n};\n\nexport default Login;","/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/Register.tsx",[],["173","174"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/Routes.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useMessages.ts",["175"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/index.js",[],["176","177"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useChattyScript.tsx",[],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/DisplayedMessagesTest.tsx",["178"],"/Users/louieg3/Documents/Web_development/test-acoustic-frontend/src/Components/ChatBot/helpers/useSpotifyAuth.tsx",["179","180","181"],{"ruleId":"182","severity":1,"message":"183","line":1,"column":36,"nodeType":"184","messageId":"185","endLine":1,"endColumn":45},{"ruleId":"186","severity":1,"message":"187","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"188","severity":1,"message":"189","line":20,"column":6,"nodeType":"190","endLine":20,"endColumn":13,"suggestions":"191"},{"ruleId":"182","severity":1,"message":"192","line":4,"column":11,"nodeType":"184","messageId":"185","endLine":4,"endColumn":16},{"ruleId":"182","severity":1,"message":"193","line":2,"column":9,"nodeType":"184","messageId":"185","endLine":2,"endColumn":13},{"ruleId":"182","severity":1,"message":"187","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"194","replacedBy":"198"},{"ruleId":"196","replacedBy":"199"},{"ruleId":"186","severity":1,"message":"187","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"188","severity":1,"message":"189","line":20,"column":6,"nodeType":"190","endLine":20,"endColumn":13,"suggestions":"200"},{"ruleId":"194","replacedBy":"201"},{"ruleId":"196","replacedBy":"202"},{"ruleId":"182","severity":1,"message":"203","line":6,"column":8,"nodeType":"184","messageId":"185","endLine":6,"endColumn":29},{"ruleId":"188","severity":1,"message":"204","line":105,"column":6,"nodeType":"190","endLine":105,"endColumn":66,"suggestions":"205"},{"ruleId":"194","replacedBy":"206"},{"ruleId":"196","replacedBy":"207"},{"ruleId":"194","replacedBy":"208"},{"ruleId":"196","replacedBy":"209"},{"ruleId":"182","severity":1,"message":"210","line":6,"column":9,"nodeType":"184","messageId":"185","endLine":6,"endColumn":13},{"ruleId":"182","severity":1,"message":"211","line":7,"column":9,"nodeType":"184","messageId":"185","endLine":7,"endColumn":14},{"ruleId":"194","replacedBy":"212"},{"ruleId":"196","replacedBy":"213"},{"ruleId":"182","severity":1,"message":"187","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"194","replacedBy":"201"},{"ruleId":"196","replacedBy":"202"},{"ruleId":"182","severity":1,"message":"214","line":1,"column":16,"nodeType":"184","messageId":"185","endLine":1,"endColumn":23},{"ruleId":"182","severity":1,"message":"187","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"182","severity":1,"message":"215","line":26,"column":88,"nodeType":"184","messageId":"185","endLine":26,"endColumn":104},{"ruleId":"182","severity":1,"message":"216","line":32,"column":9,"nodeType":"184","messageId":"185","endLine":32,"endColumn":42},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-unused-vars","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'myRef'. Either include it or remove the dependency array.","ArrayExpression",["217"],"'IUser' is defined but never used.","'Link' is defined but never used.","no-native-reassign",["218"],"no-negated-in-lhs",["219"],["218"],["219"],["220"],["218"],["219"],"'DisplayedMessagesTest' is defined but never used.","React Hook useEffect has missing dependencies: 'addContentToBeDisplayed', 'addToDisplayedContent', and 'incrementMessageValue'. Either include them or remove the dependency array.",["221"],["218"],["219"],["218"],["219"],"'code' is assigned a value but never used.","'state' is assigned a value but never used.",["218"],["219"],"'useMemo' is defined but never used.","'displayedContent' is assigned a value but never used.","'authorizationError' is assigned a value but never used.",{"desc":"222","fix":"223"},"no-global-assign","no-unsafe-negation",{"desc":"222","fix":"224"},{"desc":"225","fix":"226"},"Update the dependencies array to be: [delay, myRef]",{"range":"227","text":"228"},{"range":"229","text":"228"},"Update the dependencies array to be: [count, messages, finishedFunction, incrementMessagingPhase, addToDisplayedContent, addContentToBeDisplayed, incrementMessageValue]",{"range":"230","text":"231"},[416,423],"[delay, myRef]",[416,423],[4840,4900],"[count, messages, finishedFunction, incrementMessagingPhase, addToDisplayedContent, addContentToBeDisplayed, incrementMessageValue]"]